name: Build
on: push
env:
  COLCON_DEFAULTS_FILE: src/navground/colcon/defaults.yaml
jobs:
  build_cpp:
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-latest
          - windows-latest
          - macos-latest
    name: Build C++ 📦
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          path: src/navground
          # else it does not fetch the tags
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: 'pip'
      - name: install colcon
        run: pip install colcon-common-extensions
      - name: load deps
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: install
          key: ${{ matrix.os }}-${{ hashFiles('src/navground/installation/deps.repos', 'src/navground/installation/ament.repos') }}
      - uses: ilammy/msvc-dev-cmd@v1
      - name: download deps
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          pip install vcstool
          vcs import --shallow --input src/navground/installation/deps.repos
          vcs import --shallow --input src/navground/installation/ament.repos
      - name: build deps (win)
        if: ${{runner.os == 'Windows' && steps.cache.outputs.cache-hit != 'true' }}
        run: |
          set COLCON_DEFAULTS_FILE=src\navground\colcon\defaults.yaml
          colcon build --event-handlers desktop_notification- --metas src\navground\colcon\navground.meta --packages-up-to argparse Eigen3 YAML_CPP GEOS HighFive HDF5 pybind11 ament_cmake ament_package ament_index_cpp      
      - name: build deps (unix)
        if: ${{runner.os != 'Windows' && steps.cache.outputs.cache-hit != 'true' }}
        run: colcon build --metas src/navground/colcon/navground.meta --packages-up-to argparse Eigen3 YAML_CPP GEOS HighFive HDF5 pybind11 ament_cmake ament_package ament_index_cpp
      - name: save deps
        uses: actions/cache/save@v4
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: install
          key: ${{ matrix.os }}-${{ hashFiles('src/navground/installation/deps.repos', 'src/navground/installation/ament.repos') }}   
      - name: build navground (unix)
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          colcon build --metas src/navground/colcon/navground.meta --packages-select navground_core navground_sim navground_examples navground_examples_yaml
      - name: build navground (win)
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          set COLCON_DEFAULTS_FILE=src\navground\colcon\defaults.yaml
          colcon build --event-handlers desktop_notification- --metas src\navground\colcon\navground.meta --packages-select navground_core navground_sim navground_examples navground_examples_yaml
      - name: archive install
        uses: actions/upload-artifact@v4
        with:
          name: install-${{ matrix.os }}
          path: install
          if-no-files-found: error

  test_cpp:
    needs: build_cpp
    name: Test C++ 📦
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-latest
          - windows-latest
          - macos-latest
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: download install
        uses: actions/download-artifact@v4
        with:
          name: install-${{ matrix.os }}
          path: install
      - name: chmod
        if: runner.os != 'Windows'
        run: |
          chmod -R 777 install/bin
      - name: test info
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          navground info --build --properties
      - name: test info
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          navground info --build --properties
      - name: test plugins
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          navground plugins --dependencies
      - name: test plugins
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          navground plugins --dependencies
      - name: test schema
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          navground schema sim
      - name: test schema
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          navground schema sim
      - name: test echo
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          navground echo behavior "{type: Dummy}"
      - name: test echo
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          navground echo behavior "{type: Dummy}"
      - name: test sample
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          navground sample "{type: Cross, groups: [{number: 10, behavior: {type: Dummy}}]}"
      - name: test sample
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          navground sample "{type: Cross, groups: [{number: 10, behavior: {type: Dummy}}]}"
      - name: test run
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          navground run install/share/navground_examples_yaml/experiment/cross.yaml
          navground run install/share/navground_examples_yaml/experiment/corridor.yaml --save_directory "."
          navground run install/share/navground_examples_yaml/experiment/cross_torus.yaml --runs 2 --run_index 1001 --chdir
          navground run install/share/navground_examples_yaml/experiment/antipodal.yaml --threads 2 --runs 10 --tqdm
      - name: test run
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          navground run install/share/navground_examples_yaml/experiment/cross.yaml
          navground run install/share/navground_examples_yaml/experiment/corridor.yaml --save_directory "."
          navground run install/share/navground_examples_yaml/experiment/cross_torus.yaml --runs 2 --run_index 1001 --chdir
          navground run install/share/navground_examples_yaml/experiment/antipodal.yaml --threads 2 --runs 10 --tqdm
  build_py:
    needs: test_cpp
    name: Build Python 📦
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-latest
          - windows-latest
          - macos-latest
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          path: src/navground
          # else it does not fetch the tags
          fetch-depth: 0
      - name: download install
        uses: actions/download-artifact@v4
        with:
          name: install-${{ matrix.os }}
          path: install
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: install build deps
        run: pip install colcon-common-extensions wheel setuptools build setuptools_git_versioning libclang repairwheel
      - name: install pybind11_mkdoc
        run: |
          git clone --depth=1 https://github.com/jeguzzi/pybind11_mkdoc.git --branch rst src/pybind11_mkdoc
          cd src/pybind11_mkdoc
          pip install .
          cd -
      - uses: ilammy/msvc-dev-cmd@v1
      - name: build navground (unix)
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          colcon build --metas src/navground/colcon/navground.meta --packages-select navground_core_py navground_sim_py navground_examples_py
      - name: build navground (win)
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          set COLCON_DEFAULTS_FILE=src\navground\colcon\defaults.yaml
          colcon build --event-handlers console_direct+ --event-handlers desktop_notification- --metas src\navground\colcon\navground.meta --packages-select navground_core_py navground_sim_py navground_examples_py
      - name: archive logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: log-${{ matrix.os }}-py${{matrix.python-version}}
          path: log
          if-no-files-found: error
      - name: archive install
        uses: actions/upload-artifact@v4
        with:
          name: install-${{ matrix.os }}-py${{matrix.python-version}}
          path: install
          if-no-files-found: error
      - name: build wheel (win)
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          cd src\navground\navground_py
          python setup.py bdist_wheel
          $fileNames = Get-ChildItem -Path dist -Recurse -Include *.whl
          repairwheel -o ..\..\..\dist $fileNames[0]
      - name: build wheel (unix)
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          cd src/navground/navground_py
          python setup.py bdist_wheel
          repairwheel -o ../../../dist dist/*.whl
      - name: archive wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-py${{matrix.python-version}}
          path: dist/*
          if-no-files-found: error

  test_py:
    needs: build_py
    name: Test Python 📦
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-latest
          - windows-latest
          - macos-latest
        python-version:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: download install
        uses: actions/download-artifact@v4
        with:
          name: install-${{ matrix.os }}-py${{matrix.python-version}}
          path: install
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: install python runtime deps
        run: pip install numpy PyYaml tqdm cairosvg moviepy Jinja2 websockets jsonschema
      - name: chmod
        if: runner.os != 'Windows'
        run: |
          chmod -R 777 install/bin
      - name: test load
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          python -c "from navground import core, sim"
      - name: test load
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          python -c "from navground import core, sim"
      - name: test info
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          navground_py info --build --properties
      - name: test info
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          navground_py info --build --properties
      - name: test plugins
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          navground_py plugins --dependencies
      - name: test plugins
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          navground_py plugins --dependencies
      - name: test schema
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          navground_py schema sim
      - name: test schema
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          navground_py schema sim
      - name: test validate
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          navground_py validate experiment install/share/navground_examples_yaml/experiment/cross.yaml
      - name: test validate
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          navground_py validate experiment install/share/navground_examples_yaml/experiment/cross.yaml
      - name: test echo
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          navground_py echo behavior "{type: Dummy}"
          navground_py echo behavior "{type: PyDummy}"
      - name: test echo
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          navground_py echo behavior "{type: Dummy}"
          navground_py echo behavior "{type: PyDummy}"
      - name: test sample
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          navground_py sample "{type: Cross, groups: [{number: 10, behavior: {type: PyDummy}}]}"
      - name: test sample
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          navground_py sample "{type: Cross, groups: [{number: 10, behavior: {type: PyDummy}}]}"
      - name: test run
        if: runner.os != 'Windows'
        run: |
          source install/setup.bash
          navground_py run install/share/navground_examples_yaml/experiment/cross.yaml
          navground_py run install/share/navground_examples_yaml/experiment/corridor.yaml    --save_directory "."
          navground_py run install/share/navground_examples_yaml/experiment/cross_torus.yaml --runs 2 --run_index 1001 --chdir
          navground_py run install/share/navground_examples_yaml/experiment/antipodal.yaml   --processes 2 --runs 10 --tqdm
      - name: test run
        if: runner.os == 'Windows'
        run: |
          install\setup.ps1
          navground_py run install/share/navground_examples_yaml/experiment/cross.yaml
          navground_py run install/share/navground_examples_yaml/experiment/corridor.yaml    --save_directory "."
          navground_py run install/share/navground_examples_yaml/experiment/cross_torus.yaml --runs 2 --run_index 1001 --chdir
          navground_py run install/share/navground_examples_yaml/experiment/antipodal.yaml   --processes 2 --runs 10 --tqdm
      - name: test video (mac)
        if: runner.os == 'macOS'
        run: |
          brew install -y ffmpeg cairo
          export DYLD_FALLBACK_LIBRARY_PATH=$DYLD_FALLBACK_LIBRARY_PATH/opt/homebrew/lib:$PATH
          source install/setup.bash
          navground_py record_video install/share/navground_examples_yaml/experiment/cross.yaml video.mp4 --factor 25 --seed 1
      - name: test video (linux)
        if: runner.os == 'Linux'
        run: |
          source install/setup.bash
          navground_py record_video install/share/navground_examples_yaml/experiment/cross.yaml video.mp4 --factor 25 --seed 1
      - name: install cairo (win)
        if: runner.os == 'Windows'
        uses: robinraju/release-downloader@v1
        with:
          repository: preshing/cairo-windows
          tag: with-tee
          fileName: cairo-windows-1.17.2.zip
          extract: true
      - name: test video (win)
        if: runner.os == 'Windows'
        run: |
          Copy-Item "cairo-windows-1.17.2\lib\x64\cairo.dll" -Destination "libcairo-2.dll"
          choco install -y ffmpeg
          install\setup.ps1
          navground_py record_video install/share/navground_examples_yaml/experiment/cross.yaml video.mp4 --factor 25 --seed 1
      - name: upload video
        uses: actions/upload-artifact@v4
        with:
          name: video-${{ matrix.os }}-py${{matrix.python-version}}
          path: video.mp4
          if-no-files-found: error

  publish-to-testpypi:
    needs: test_py
    name: Publish wheels to TestPyPI
    if: startsWith(github.ref, 'refs/tags/')  # temporary: only publish to TestPyPI on tag pushes, else the wheel is rejected
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/navground
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheel-*
          path: dist
          merge-multiple: true
      - run: |
          echo "Ignore generic linux wheels:" $(find dist -type f | grep linux_x86_64)
          rm -f dist/*linux_x86_64*
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
  publish-to-pypi:
    needs: test_py
    name: Publish wheels to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/navground  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheel-*
          path: dist
          merge-multiple: true
      - run: |
          echo "Ignore generic linux wheels:" $(find dist -type f | grep linux_x86_64)
          rm -f dist/*linux_x86_64*
      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
      - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheel-*
          path: dist
          merge-multiple: true
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'
